""" Even Fibonacci numbers
Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of
the even-valued terms."""


import time
t0 = time.time()
ans = 0
limit = 4000000
test_range = 10
cache_array = []
fib = 0
initial = 0


def is_even(i):  #  bitwise operation to more efficiently test whether x is even
    if i & 1 == 0:
        return True


def fib_rec(x):
    if x == 0:
        return x
    elif x == 1:
        return x
    return fib_rec(x - 1) + fib_rec(x - 2)


while initial < 35:
    for x in range(1, initial):
        if cache_array[initial-1] >= 1: #checks for valid entries in cache
            fib = cache_array[initial-1] + cache_array[initial-2]
    fib = fib_rec(initial)
    cache_array.append(fib)  #  updates the cache with the new fibonacci number
    if is_even(fib):
        ans += fib
    if fib > limit - cache_array[initial-1]:
        break
    initial += 1
print(ans)

t1 = time.time()
print(t1-t0)